setwd("C:/Users/rafat/Downloads/KBMR-dev")
rm(list=ls(all=TRUE))
library( gmp) # bigz
#library( gat)
library( lattice)
library( foreach)
library( cluster)
#### module ####
setwd("./defs")
source("kbmr-definition.R")
setwd("..")
#### module ####
setwd("./tabs")
source("kbmr-inout.R")
#source("kbmr-spectrum.R")
setwd("..")
#### module ####
setwd("./optalg")
source("kbmr-optimization.R")
setwd("..")
#### module ####
setwd("./query")
#source("kbmr-queries.R")
#source("kbmr-explanation.R")
setwd("..")
#### module RAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ####
setwd("./Rafa")
source("custom.base.R")
setwd("..")
### models, kbmr.demo()
setwd("./models")
cat("Models source reading:\n")
cat("Models source OK.\n")
setwd("..")
a<-combinaciones.base(c(0,1,2,3,4))
source("vector.swap.R")
#### module RAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ####
setwd("./Rafa")
source("custom.base.R")
source("vector.swap.R")
source("combinaciones.base.R")
a<-combinaciones.base(c(0,1,2,3,4))
result<-list( listaBases,listaDisG)
##devuelve todas las combinaciones de distancia hamming 2, y devuelve tambien la distancia G
combinaciones.base<- function(base,distanciaH=2){
lbas<-length(base)
j<-1
listaDisG<-list()
listaBases<-list()
for(it1 in 1:(lbas-1)){
for(it2 in (it1+1):(lbas)){
listaBases[[j]]<-vector.swap(base,it1,it2)
#dis G= Rleft +(sum(huecos entre medias+hamming -1))= (i-1)+(j-i-1)-1
listaDisG[[j]]<- (it1-1)+(it2-it1-1)-1
j<-j+1
}
}
result<-list( listaBases,listaDisG)
return(result)
}
a<-combinaciones.base(c(0,1,2,3,4))
##devuelve todas las combinaciones de distancia hamming 2, y devuelve tambien la distancia G
combinaciones.base<- function(base,distanciaH=2){
lbas<-length(base)
j<-1
listaDisG<-list()
listaBases<-list()
for(it1 in 1:(lbas-1)){
for(it2 in (it1+1):(lbas)){
listaBases[[j]]<-vector.swap(base,it1,it2)
#dis G= Rleft +(sum(huecos entre medias+hamming -1))= (i-1)+(j-i-1)-1
listaDisG[[j]]<- (it1-1)+(it2-it1-1)-1
j<-j+1
}
}
result<-list("bases"= listaBases, "distanciaG"= listaDisG)
return(result)
}
a<-combinaciones.base(c(0,1,2,3,4))
View(a)
##devuelve todas las combinaciones de distancia hamming 2, y devuelve tambien la distancia G
combinaciones.base<- function(base,distanciaH=2){
lbas<-length(base)
j<-1
listaDisG<-list()
listaBases<-list()
for(it1 in 1:(lbas-1)){
for(it2 in (it1+1):(lbas)){
listaBases[[j]]<-vector.swap(base,it1,it2)
#dis G= Rleft +(sum(huecos entre medias+hamming -1))= (i-1)+(j-i-1)+2-1
listaDisG[[j]]<- (it1-1)+(it2-it1-1)+2-1
j<-j+1
}
}
result<-list("bases"= listaBases, "distanciaG"= listaDisG)
return(result)
}
a<-combinaciones.base(c(0,1,2,3,4))
View(a)
a<-combinaciones.base(c(0,1,2,3,4,5,6,7))
View(a)
a<-combinaciones.base(c(0,1,2,3,4))
View(a)
